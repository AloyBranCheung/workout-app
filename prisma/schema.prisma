// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Documentation Tool: https://dbdiagram.io/home

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Attributes Table
model User {
  id           Int           @id @unique @default(autoincrement())
  userId       String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  email        String        @unique
  name         String
  // relations
  workoutPlans WorkoutPlan[]
  exercises    Exercise[]
  profile      Profile?
}

// Profile Model Table
model Profile {
  profileId String   @id @unique @default(uuid())
  updatedAt DateTime @default(now()) @updatedAt
  createdAt DateTime @default(now())
  BMI       Int
  user      User     @relation(fields: [userId], references: [userId])
  userId    String   @unique
}

// Exercises Table
model Exercise {
  exerciseId   String        @id @unique @default(uuid()) @db.Uuid
  updatedAt    DateTime      @default(now()) @updatedAt
  createdAt    DateTime      @default(now())
  name         String
  // relations
  user         User          @relation(fields: [userId], references: [userId])
  userId       String
  session      Session[]
  workoutPlans WorkoutPlan[]
}

// Session Table for each workout 'session'
model Session {
  sessionId       String            @id @unique @default(uuid()) @db.Uuid
  updatedAt       DateTime          @default(now()) @updatedAt
  createdAt       DateTime          @default(now())
  // relations
  exercise        Exercise          @relation(fields: [exerciseId], references: [exerciseId])
  exerciseId      String            @db.Uuid
  exerciseHistory ExerciseHistory[]
  historyId       String            @db.Uuid
}

// Exercise History Table
model ExerciseHistory {
  historyId String   @id @unique @default(uuid()) @db.Uuid
  updatedAt DateTime @default(now()) @updatedAt
  createdAt DateTime @default(now())
  weight    Int
  unit      String   @default("kg")
  // relations
  sets      Set[]
  session   Session  @relation(fields: [sessionId], references: [sessionId])
  sessionId String   @db.Uuid
}

// Set (For exercises) Table
model Set {
  setId     String          @id @unique @default(uuid()) @db.Uuid
  updatedAt DateTime        @default(now()) @updatedAt
  createdAt DateTime        @default(now())
  weight    Int
  reps      Int
  // relations
  history   ExerciseHistory @relation(fields: [historyId], references: [historyId])
  historyId String          @db.Uuid
}

model WorkoutPlan {
  planId    String     @id @unique @default(uuid()) @db.Uuid
  // relations
  user      User       @relation(fields: [userId], references: [userId])
  userId    String     @unique
  exercises Exercise[]
}
