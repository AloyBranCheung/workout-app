// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Documentation Tool: https://dbdiagram.io/home
// tables are Singular 

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Attributes Table
model User {
  id             Int             @id @unique @default(autoincrement())
  userId         String          @unique
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt
  email          String          @unique
  name           String
  // relations
  workoutPlans   WorkoutPlan[]
  exercises      Exercise[]
  profile        Profile?
  runPlans       RunPlan[]
  activities     Activity[]
  gymLocations   GymLocation[]
  currActiveSesh CurrActiveSesh?
}

// Profile Model Table
model Profile {
  profileId   String   @id @unique @default(uuid())
  updatedAt   DateTime @default(now()) @updatedAt
  createdAt   DateTime @default(now())
  height      Int?
  heightUnits String?  @default("cm")
  weight      Int?
  weightUnits String?  @default("kg")
  BMI         Int?
  avatar      String?

  user   User   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId String @unique
}

// Activity Table 
model Activity {
  activityId  String       @id @unique @default(uuid()) @db.Uuid
  updatedAt   DateTime     @default(now()) @updatedAt
  createdAt   DateTime     @default(now())
  // relations
  sessionId   Session?
  runExercise RunExercise?

  user   User   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId String
}

// Exercises Table
model Exercise {
  exerciseId   String      @id @unique @default(uuid()) @db.Uuid
  updatedAt    DateTime    @default(now()) @updatedAt
  createdAt    DateTime    @default(now())
  name         String
  description  String?
  url          String?
  unit         String
  // relations
  user         User        @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId       String
  gymLocations GymLocation @relation(fields: [gymId], references: [gymId], onDelete: Cascade)
  gymId        String      @db.Uuid

  workoutPlans WorkoutPlan[]
  sets         Set[]
  target       Target?
}

// Exercise Targets for Workout
model Target {
  targetId   String   @id @unique @default(uuid()) @db.Uuid
  updatedAt  DateTime @default(now()) @updatedAt
  createdAt  DateTime @default(now())
  targetReps Int
  targetSets Int
  // relations
  exercise   Exercise @relation(fields: [exerciseId], references: [exerciseId], onDelete: Cascade)
  exerciseId String   @unique @db.Uuid

  workoutPlan WorkoutPlan @relation(fields: [planId], references: [planId], onDelete: Cascade)
  planId      String      @db.Uuid
}

// Session Table for each workout 'session'
model Session {
  sessionId String   @id @unique @default(uuid()) @db.Uuid
  updatedAt DateTime @default(now()) @updatedAt
  createdAt DateTime @default(now())
  duration  Int
  // relations
  sets      Set[]

  workoutPlan WorkoutPlan @relation(fields: [planId], references: [planId])
  planId      String      @db.Uuid

  activity   Activity @relation(fields: [activityId], references: [activityId])
  activityId String   @unique @db.Uuid

  currActiveSesh CurrActiveSesh?
}

// Exercise History Table
model Set {
  historyId String   @id @unique @default(uuid()) @db.Uuid
  updatedAt DateTime @default(now()) @updatedAt
  createdAt DateTime @default(now())
  weight    Int
  unit      String   @default("kg")
  reps      Int
  note      String?

  // relations
  session   Session @relation(fields: [sessionId], references: [sessionId])
  sessionId String  @db.Uuid

  exercise   Exercise @relation(fields: [exerciseId], references: [exerciseId])
  exerciseId String   @db.Uuid
}

model WorkoutPlan {
  planId      String      @id @unique @default(uuid()) @db.Uuid
  updatedAt   DateTime    @default(now()) @updatedAt
  createdAt   DateTime    @default(now())
  name        String
  lastWorkout DateTime? // calculate and update row
  duration    Int? // calculate and update row 
  // relations
  user        User        @relation(fields: [userId], references: [userId])
  userId      String
  gymLocation GymLocation @relation(fields: [gymId], references: [gymId], onDelete: Cascade)
  gymId       String      @db.Uuid

  exercises Exercise[]
  sessions  Session[]
  targets   Target[]
}

model RunPlan {
  planId    String   @id @unique @default(uuid()) @db.Uuid
  updatedAt DateTime @default(now()) @updatedAt
  createdAt DateTime @default(now())

  // relations
  runExercises RunExercise[]

  user   User   @relation(fields: [userId], references: [userId])
  userId String
}

model RunExercise {
  exerciseId          String   @id @unique @default(uuid()) @db.Uuid
  updatedAt           DateTime @default(now()) @updatedAt
  createdAt           DateTime @default(now())
  targetDistance      Int
  targetDistanceUnits String   @default("km")
  isCompleted         Boolean

  // relations
  runPlan RunPlan @relation(fields: [planId], references: [planId])
  planId  String  @db.Uuid

  run Run[]

  activity   Activity @relation(fields: [activityId], references: [activityId])
  activityId String   @unique @db.Uuid
}

model Run {
  runId               String   @id @unique @default(uuid()) @db.Uuid
  updatedAt           DateTime @default(now()) @updatedAt
  createdAt           DateTime @default(now())
  duration            Int // milliseconds
  speed               Int
  speedUnits          String   @default("km")
  speedPerTimeUnit    String   @default("hour")
  actualDistance      Int
  actualDistanceUnits String   @default("km")
  note                String?

  // relation
  runExercise RunExercise @relation(fields: [exerciseId], references: [exerciseId])
  exerciseId  String      @db.Uuid
}

model GymLocation {
  gymId       String   @id @unique @default(uuid()) @db.Uuid
  updatedAt   DateTime @default(now()) @updatedAt
  createdAt   DateTime @default(now())
  name        String
  description String?

  // relation
  user   User   @relation(fields: [userId], references: [userId])
  userId String

  workoutPlans WorkoutPlan[]
  exercises    Exercise[]
}

model CurrActiveSesh {
  actSeshId String   @id @unique @default(uuid()) @db.Uuid
  updatedAt DateTime @default(now()) @updatedAt
  createdAt DateTime @default(now())
  // relations

  session   Session @relation(fields: [sessionId], references: [sessionId])
  sessionId String  @unique @db.Uuid

  user   User   @relation(fields: [userId], references: [userId])
  userId String @unique
}
